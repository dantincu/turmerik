var trmrk;(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{browser:()=>S});var r={};e.r(r),e.d(r,{allWsRegex:()=>o,any:()=>l,contains:()=>c,forEach:()=>a,isNonEmptyStr:()=>d});var i={};e.r(i),e.d(i,{absUriRegex:()=>u,getNewUri:()=>b,getRelUri:()=>g});var n={};e.r(n),e.d(n,{TrmrkIdxedDB:()=>p,createDBStore:()=>x,getOrCreateDbStore:()=>y});var s={};e.r(s),e.d(s,{AxiosIdxedDB:()=>D});const o=/^\s+$/g,d=(e,t=!1)=>{let r="string"==typeof e;return r=r&&""!==e,r&&t&&(r=!o.test(e)),r},a=(e,t)=>{for(let r=0;r<e.length&&!1!==t(e[r],r,e);r++);},c=(e,t)=>e.indexOf(t)>=0,l=(e,t)=>e.filter(t).length>=0,h={...r},u=/^[\w\-_]+\:\/\/([\w\-_]+\.?)+(\:[0-9]+)?(\/[\w\-\?\.\+_&=#,]*)*$/g,b=(e,t,r,i,n)=>{const s=e?.toString();let o=[i,r].filter((e=>h.isNonEmptyStr(e,!0))).join("/");return(n||h.isNonEmptyStr(s,!0))&&(o=[o,s].join("?")),h.isNonEmptyStr(t)&&(o+=t),o},g=(e,t,r,i,n)=>{t(e),r??=e=>e,i??=e=>("string"==typeof e&&(e.startsWith("/")&&(e=e.substring(1)),e.endsWith("/")&&(e=e.substring(0,e.length-1))),e);const s=r(location.hash),o=i(location.pathname);return b(e,s,o,null,n)};class p{_dbReq=null;_db=null;dbName;version;onerror;onupgradeneeded;onblocked;onsuccess;init(e){this.dbName=e.dbName,this.version=e.dbVersion,this.onerror=e.onIdxedDBerror,this.onupgradeneeded=e.onIdxedDBupgradeneeded,this.onblocked=e.onIdxedDBblocked,this.onsuccess=e.onIdxedDBSuccess}getDb(){return new Promise(((e,t)=>{const r=this._db;if(r)e(r);else{let r=this._dbReq;r&&(r=indexedDB.open(this.dbName,this.version),this._dbReq=r,r.onsuccess=t=>{const r=t.target.result;this._db=r,this._dbReq=null,this.onsuccess?.call(this,t,r),e(r)},r.onerror=e=>{this._dbReq=null,this.onerror?.call(this,e),t(e)},r.onupgradeneeded=e=>{this._dbReq=null,this.onupgradeneeded?.call(this,e),t(e)},r.onblocked=e=>{this._dbReq=null,this.onblocked?.call(this,e),t(e)})}}))}async withDb(e){let t;try{t=e(await this.getDb())}catch(e){t={cacheError:e}}return t}}const x=(e,t,r,i)=>{const n=e.createObjectStore(t,{keyPath:r});for(let e of i.idxesArr){const t=e.dbOpts??{};t.unique??=e.unique??!1,n.createIndex(e.name,e.keyPath,t)}return n},y=(e,t,r,i,n)=>{r in t||x(e,r,i,n)};class D{apiSvc;idxedDB;constructor(e,t){this.apiSvc=e,this.idxedDB=t}init(e){return this.apiSvc.init(e.data,e.defaultConfigFactory),this.idxedDB.init(e)}async req(e){let t=await this.idxedDB.withDb(e.idxedDBGet);return t.cacheMatch||t.cacheError||(t=await e.apiCall(this.apiSvc),t.isSuccessStatus&&await this.idxedDB.withDb((r=>{const i=e.idxedDBSet(r,t.data);return t.cacheError=i.cacheError,i}))),t}}const S={axiosIdxedDB:{...s}};trmrk=t})();