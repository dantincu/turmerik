<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMAOAADADgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAIFL+Hx5O2lseTNNdIEvJRx5N2FwhTt97HUS4dxxGvDYcTdQkHEClPx5DrGYeR8NEKiqqBgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAcTOs1H0/fkxo9jMQbR7r2IVr+/yBW8v8dTcn/G0Wv/xpCo/8fTcv/H0m8/x5KyvwfUeL/IEzG/yFT
        4/8eRbXbHkOkrh4tR0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAdTd+aIFHhzx9Q2v8iWfj/GkCQ/xtItv8dS8n+Fjh5/hY4gf8RKkb+ESlB/htDr/4cQZ//HUnB/x5R
        2/8eTdD+Hk3Q/x5Fqv8gSLH/H0i59iBNy4cfN4cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpG
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHFr+LR9IuqEcP5f5Hk3C/yBb//8eT9b/HEWq/yBS3/8gV/H/IFfw/yBU4/8hV+v/HkvM2x5F
        yCEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB5b/iodSsCTHU3M8SBS2/8cQZ//Hki94h9S6N4eU+XPHk/Stx5M
        0I8aUPETAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbNnYcHki/XB5T8Toff/8IM2b/BQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////8AB//4AAH/4AAAfwAAABwAAAAEAAAABgAAAAIAA
        AACAAAABgAAAA4AAAAPgAAAP+AAAf/4AA///gAP//4AD//+AA///AAP//wAD//8AAf//AAH//wAB//8A
        Af//gAH//+AD///4P/////////////////8=
</value>
  </data>
</root>