{"mappings":"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","sources":["src/index.ts","src/core.ts"],"sourcesContent":["import { AxiosRequestConfig as AxiosRequestConfigType } from \"axios\";\r\nimport * as apiCore from \"./core\";\r\n\r\nexport type ApiConfigData = apiCore.ApiConfigData;\r\nexport type ApiResponse<T> = apiCore.ApiResponse<T>;\r\nexport type AxiosResponse<T> = apiCore.AxiosResponse<T>;\r\nexport const ApiService = apiCore.ApiService;\r\nexport type ApiServiceType = apiCore.ApiServiceType;\r\nexport type AxiosRequestConfig<D = any> = AxiosRequestConfigType<D>;\r\n","import axios, { AxiosRequestConfig } from \"axios\";\r\n\r\nexport namespace ns {\r\n  export interface ApiConfigData {\r\n    apiHost: string;\r\n    apiRelUriBase: string;\r\n    clientVersion: number;\r\n  }\r\n\r\n  export interface AxiosResponse<T> {\r\n    data: T;\r\n    status: number;\r\n    statusText: string;\r\n    request?: any;\r\n    headers: { [key: string]: string };\r\n  }\r\n\r\n  export interface ApiResponse<T> extends AxiosResponse<T> {\r\n    error?: any | null | undefined;\r\n    errTitle?: string | null | undefined;\r\n    errMessage?: string | null | undefined;\r\n    isSuccessStatus?: boolean | null | undefined;\r\n    isRedirectStatus?: boolean | null | undefined;\r\n    isInfoStatus?: boolean | null | undefined;\r\n    isErrorStatus?: boolean | null | undefined;\r\n    isClientErrorStatus?: boolean | null | undefined;\r\n    isServerErrorStatus?: boolean | null | undefined;\r\n    isForbiddenStatus?: boolean | null | undefined;\r\n    isBadRequestStatus?: boolean | null | undefined;\r\n    isNotAuthenticatedStatus?: boolean | null | undefined;\r\n    isNotFoundStatus?: boolean | null | undefined;\r\n    isTimeoutStatus?: boolean | null | undefined;\r\n    isPreconditionRequiredStatus?: boolean | null | undefined;\r\n  }\r\n\r\n  export const trmrkHeaderNames = {\r\n    clientVersion: \"trmrk-client-version\",\r\n    clientUserUuid: \"trmrk-client-user-uuid\",\r\n    requiredClientVersion: \"trmrk-required-client-version\",\r\n  };\r\n\r\n  export class ApiService {\r\n    public apiHost!: string;\r\n    public apiRelUriBase!: string;\r\n    public apiUriBase!: string;\r\n    public clientVersion!: number;\r\n    public clientUserUuid!: string;\r\n\r\n    public defaultConfigFactory: (\r\n      data: any\r\n    ) => AxiosRequestConfig<any> | undefined = () => undefined;\r\n\r\n    public init(\r\n      data: ns.ApiConfigData,\r\n      defaultConfigFactory?:\r\n        | ((data: any) => AxiosRequestConfig<any> | undefined)\r\n        | null\r\n        | undefined\r\n    ) {\r\n      this.apiHost = data.apiHost;\r\n      this.apiRelUriBase = data.apiRelUriBase;\r\n      this.apiUriBase = [this.apiHost, this.apiRelUriBase].join(\"/\");\r\n      this.clientVersion = data.clientVersion;\r\n\r\n      this.defaultConfigFactory =\r\n        defaultConfigFactory ??\r\n        ((data) => {\r\n          const headers: { [key: string]: string } = {};\r\n\r\n          headers[ns.trmrkHeaderNames.clientVersion] =\r\n            this.clientVersion.toString();\r\n\r\n          headers[ns.trmrkHeaderNames.clientUserUuid] = this.clientUserUuid;\r\n\r\n          return {\r\n            withCredentials: true,\r\n            headers,\r\n          };\r\n        });\r\n    }\r\n\r\n    public getUri(relUri: string) {\r\n      const uri = [this.apiUriBase, relUri].join(\"/\");\r\n      return uri;\r\n    }\r\n\r\n    public getError<T>(reason: any) {\r\n      const resp = {\r\n        error: reason,\r\n        errTitle: \"Error\",\r\n        errMessage: reason.message ?? \"Oops... something went wrong\",\r\n      } as ns.ApiResponse<T>;\r\n\r\n      return resp;\r\n    }\r\n\r\n    public resolvePromise<T>(\r\n      prom: Promise<ns.AxiosResponse<T>>,\r\n      resolve: (\r\n        value: ns.ApiResponse<T> | PromiseLike<ns.ApiResponse<T>>\r\n      ) => void\r\n    ) {\r\n      prom\r\n        .then((response) => {\r\n          const resp = this.setResponseFields(response as ns.ApiResponse<T>);\r\n          resolve(resp);\r\n        })\r\n        .catch((reason) => {\r\n          let resp: ApiResponse<T>;\r\n          const response = reason.response;\r\n\r\n          if (response) {\r\n            resp = this.setResponseFields(response as ns.ApiResponse<T>);\r\n          } else {\r\n            resp = this.getError<T>(reason);\r\n          }\r\n\r\n          resolve(resp);\r\n        });\r\n    }\r\n\r\n    public setResponseFields<T>(resp: ns.ApiResponse<T>) {\r\n      const status = resp.status;\r\n\r\n      if (status >= 100) {\r\n        if (status < 200) {\r\n          resp.isInfoStatus = true;\r\n        } else if (status < 300) {\r\n          resp.isSuccessStatus = true;\r\n        } else if (status < 400) {\r\n          resp.isRedirectStatus = false;\r\n        } else {\r\n          resp.isErrorStatus = false;\r\n\r\n          if (status < 500) {\r\n            resp.isClientErrorStatus = true;\r\n\r\n            switch (status) {\r\n              case 400:\r\n                resp.errMessage = \"A validation error has occurred\";\r\n                resp.isBadRequestStatus = true;\r\n                break;\r\n              case 401:\r\n                resp.errMessage = \"You are not authenticated\";\r\n                resp.isNotAuthenticatedStatus = true;\r\n                break;\r\n              case 403:\r\n                resp.errMessage = \"You are not authorized to access this page\";\r\n                resp.isForbiddenStatus = true;\r\n                break;\r\n              case 404:\r\n                resp.errMessage =\r\n                  \"The page you are looking for doesn't exist or has been moved\";\r\n                resp.isNotFoundStatus = true;\r\n                break;\r\n              case 408:\r\n                resp.errMessage = \"The request took too long to respond\";\r\n                resp.isTimeoutStatus = true;\r\n                break;\r\n              case 428:\r\n                resp.isPreconditionRequiredStatus = true;\r\n\r\n                if (ns.trmrkHeaderNames.requiredClientVersion in resp.headers) {\r\n                  resp.errMessage = `The client app in the browser needs to be updated. \\\r\n                  Please back up any unsubmitted data (if any) and then refresh the browser page in order to update the client app.`;\r\n                }\r\n            }\r\n          } else {\r\n            resp.isServerErrorStatus = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!resp.isSuccessStatus) {\r\n        if (!!status) {\r\n          resp.errTitle = status.toString();\r\n        } else {\r\n          resp.errTitle = \"Error\";\r\n        }\r\n\r\n        resp.errMessage ??= `The server responded with status ${status}`;\r\n      }\r\n\r\n      return resp;\r\n    }\r\n\r\n    public get<T, D = any>(\r\n      relUri: string,\r\n      data?: D | undefined,\r\n      configFactory?: (\r\n        d: D,\r\n        cfg: AxiosRequestConfig<D> | undefined\r\n      ) => AxiosRequestConfig<D> | undefined\r\n    ) {\r\n      return new Promise<ns.ApiResponse<T>>((resolve) => {\r\n        this.resolvePromise(\r\n          axios.get<T, ns.AxiosResponse<T>, D>(\r\n            this.getUri(relUri),\r\n            this.getConfig(configFactory, data)\r\n          ),\r\n          resolve\r\n        );\r\n      });\r\n    }\r\n\r\n    public post<T, D = any>(\r\n      relUri: string,\r\n      data: D,\r\n      configFactory?: (\r\n        d: D,\r\n        cfg: AxiosRequestConfig<D> | undefined\r\n      ) => AxiosRequestConfig<D> | undefined\r\n    ) {\r\n      return new Promise<ns.ApiResponse<T>>((resolve) => {\r\n        this.resolvePromise(\r\n          axios.post<T, ns.AxiosResponse<T>, D>(\r\n            this.getUri(relUri),\r\n            data,\r\n            this.getConfig(configFactory, data)\r\n          ),\r\n          resolve\r\n        );\r\n      });\r\n    }\r\n\r\n    public put<T, D = any>(\r\n      relUri: string,\r\n      data: D,\r\n      configFactory?: (\r\n        d: D,\r\n        cfg: AxiosRequestConfig<D> | undefined\r\n      ) => AxiosRequestConfig<D> | undefined\r\n    ) {\r\n      return new Promise<ns.ApiResponse<T>>((resolve) => {\r\n        this.resolvePromise(\r\n          axios.put<T, ns.AxiosResponse<T>, D>(\r\n            this.getUri(relUri),\r\n            data,\r\n            this.getConfig(configFactory, data)\r\n          ),\r\n          resolve\r\n        );\r\n      });\r\n    }\r\n\r\n    public patch<T, D = any>(\r\n      relUri: string,\r\n      data: D,\r\n      configFactory?: (\r\n        d: D,\r\n        cfg: AxiosRequestConfig<D> | undefined\r\n      ) => AxiosRequestConfig<D> | undefined\r\n    ) {\r\n      return new Promise<ns.ApiResponse<T>>((resolve) => {\r\n        this.resolvePromise(\r\n          axios.patch<T, ns.AxiosResponse<T>, D>(\r\n            this.getUri(relUri),\r\n            data,\r\n            this.getConfig(configFactory, data)\r\n          ),\r\n          resolve\r\n        );\r\n      });\r\n    }\r\n\r\n    public delete<T, D = any>(\r\n      relUri: string,\r\n      configFactory?: (\r\n        d: D,\r\n        cfg: AxiosRequestConfig<D> | undefined\r\n      ) => AxiosRequestConfig<D> | undefined\r\n    ) {\r\n      return new Promise<ns.ApiResponse<T>>((resolve) => {\r\n        this.resolvePromise(\r\n          axios.delete<T, ns.AxiosResponse<T>, D>(\r\n            this.getUri(relUri),\r\n            this.getConfig(configFactory)\r\n          ),\r\n          resolve\r\n        );\r\n      });\r\n    }\r\n\r\n    private getConfig<D>(\r\n      configFactory?: (\r\n        d: D,\r\n        cfg: AxiosRequestConfig<D> | undefined\r\n      ) => AxiosRequestConfig<D> | undefined,\r\n      data?: D\r\n    ) {\r\n      let config: AxiosRequestConfig<D> | undefined =\r\n        this.defaultConfigFactory(data);\r\n\r\n      configFactory ??= (dt, cfg) => {\r\n        if (cfg && (dt ?? false)) {\r\n          cfg.data ??= dt;\r\n        }\r\n\r\n        return cfg;\r\n      };\r\n\r\n      config = configFactory(data!, config);\r\n      return config;\r\n    }\r\n  }\r\n}\r\n\r\nexport type ApiConfigData = ns.ApiConfigData;\r\nexport type AxiosResponse<T> = ns.AxiosResponse<T>;\r\nexport type ApiResponse<T> = ns.ApiResponse<T>;\r\nexport const ApiService = ns.ApiService;\r\nexport type ApiServiceType = ns.ApiService;\r\n"],"names":[],"version":3,"file":"index.js.map"}