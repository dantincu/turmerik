{"mappings":";;;;;;;;;;AEiCO,MAAM;IACX,YACE,AAAgB,MAAsB,EACtC,AAAgB,OAAyB,CACzC;aAFgB,SAAA;aACA,UAAA;IACf;IAEI,KAAK,IAA0B,EAAE;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,KAAK,oBAAoB;QACrD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;IAC3B;IAEA,MAAa,IAAO,IAAwB,EAAE;QAC5C,IAAI,OAAQ,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CACnC,KAAK,UAAU;QAGjB,IAAI,CAAE,CAAA,KAAK,UAAU,IAAI,KAAK,UAAU,AAAD,GAAI;YACzC,OAAQ,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,MAAM;YAEtC,IAAI,KAAK,eAAe,EACtB,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAI,CAAC;gBAC5B,MAAM,UAAU,KAAK,UAAU,CAAC,IAAI,KAAK,IAAI;gBAC7C,KAAK,UAAU,GAAG,QAAQ,UAAU;gBAEpC,OAAO;YACT;QAEJ;QAEA,OAAO;IACT;AACF;;;AD9DO,MAAM,4CAAe;IAC1B,GAAG,yBAAI;AACT;;;;;;;;;AG2BO,MAAM;IACX,YAAY,AAAgB,MAAsB,CAAE;aAAxB,SAAA;IAAyB;IAE9C,KAAK,IAA8B,EAAE;QAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,KAAK,oBAAoB;IACvD;IAEA,MAAa,IAAO,IAA4B,EAAE;QAChD,IAAI,OAAQ,MAAM,KAAK,cAAc;QAErC,IAAI,CAAC,KAAK,UAAU,EAAE;YACpB,OAAQ,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,MAAM;YAEtC,IAAI,KAAK,eAAe,EAAE;gBACxB,MAAM,UAAU,MAAM,KAAK,cAAc,CAAC,KAAK,IAAI;gBACnD,KAAK,UAAU,GAAG,QAAQ,UAAU;YACtC;QACF;QAEA,OAAO;IACT;AACF;;;ADlDO,MAAM,4CAAmB;IAC9B,GAAG,yBAAI;AACT;;;AHDO,MAAM,4CAAU;kBACrB;sBACA;AACF","sources":["src/index.ts","src/axiosIdxedDB/index.ts","src/axiosIdxedDB/core.ts","src/axiosLocalForage/index.ts","src/axiosLocalForage/core.ts"],"sourcesContent":["import * as axiosIdxedDB from \"./axiosIdxedDB\";\r\nimport * as axiosLocalForage from \"./axiosLocalForage\";\r\n\r\nexport const browser = {\r\n  axiosIdxedDB,\r\n  axiosLocalForage,\r\n};\r\n\r\nexport type AxiosIdxedDB = axiosIdxedDB.AxiosIdxedDB;\r\nexport type AxiosIdxedDBType = axiosIdxedDB.AxiosIdxedDBType;\r\nexport type AxiosIdxedDBInitOpts = axiosIdxedDB.AxiosIdxedDBInitOpts;\r\nexport type AxiosIdxedDBReq<T> = axiosIdxedDB.AxiosIdxedDBReq<T>;\r\nexport type AxiosIdxedDBResp<T> = axiosIdxedDB.AxiosIdxedDBResp<T>;\r\n","import * as core from \"./core\";\r\n\r\nexport const axiosIdxedDB = {\r\n  ...core,\r\n};\r\n\r\nexport type AxiosIdxedDB = core.AxiosIdxedDB;\r\nexport type AxiosIdxedDBType = core.AxiosIdxedDBType;\r\nexport type AxiosIdxedDBInitOpts = core.AxiosIdxedDBInitOpts;\r\nexport type AxiosIdxedDBReq<T> = core.AxiosIdxedDBReq<T>;\r\nexport type AxiosIdxedDBResp<T> = core.AxiosIdxedDBResp<T>;\r\n","import { AxiosRequestConfig } from \"axios\";\r\n\r\nimport { core as trmrk } from \"trmrk\";\r\n\r\nimport {\r\n  ApiConfigData,\r\n  ApiResponse,\r\n  AxiosResponse,\r\n  ApiServiceType,\r\n} from \"trmrk-axios/src/core\";\r\n\r\nimport {\r\n  TrmrkIdxedDBType,\r\n  TrmrkDBResp,\r\n  IdxedDBInitOpts,\r\n} from \"trmrk-browser-core/src/indexedDB/core\";\r\n\r\nexport interface AxiosIdxedDBInitOpts extends IdxedDBInitOpts {\r\n  data: ApiConfigData;\r\n  defaultConfigFactory?:\r\n    | ((data: any) => AxiosRequestConfig<any> | undefined)\r\n    | null\r\n    | undefined;\r\n}\r\n\r\nexport interface AxiosIdxedDBReq<T> {\r\n  idxedDBGet: (db: IDBDatabase) => TrmrkDBResp<T>;\r\n  apiCall: (apiSvc: ApiServiceType) => Promise<ApiResponse<T>>;\r\n  idxedDBSet: (db: IDBDatabase, data: T) => TrmrkDBResp<T>;\r\n}\r\n\r\nexport interface AxiosIdxedDBResp<T> extends ApiResponse<T>, TrmrkDBResp<T> {}\r\n\r\nexport class AxiosIdxedDB {\r\n  constructor(\r\n    public readonly apiSvc: ApiServiceType,\r\n    public readonly idxedDB: TrmrkIdxedDBType\r\n  ) {}\r\n\r\n  public init(opts: AxiosIdxedDBInitOpts) {\r\n    this.apiSvc.init(opts.data, opts.defaultConfigFactory);\r\n    return this.idxedDB.init(opts);\r\n  }\r\n\r\n  public async req<T>(opts: AxiosIdxedDBReq<T>) {\r\n    let resp = (await this.idxedDB.withDb<T>(\r\n      opts.idxedDBGet\r\n    )) as AxiosIdxedDBResp<T>;\r\n\r\n    if (!(resp.cacheMatch || resp.cacheError)) {\r\n      resp = (await opts.apiCall(this.apiSvc)) as AxiosIdxedDBResp<T>;\r\n\r\n      if (resp.isSuccessStatus) {\r\n        await this.idxedDB.withDb<T>((db) => {\r\n          const setResp = opts.idxedDBSet(db, resp.data);\r\n          resp.cacheError = setResp.cacheError;\r\n\r\n          return setResp;\r\n        });\r\n      }\r\n    }\r\n\r\n    return resp;\r\n  }\r\n}\r\n\r\nexport type AxiosIdxedDBType = AxiosIdxedDB;\r\n","import * as core from \"./core\";\r\n\r\nexport const axiosLocalForage = {\r\n  ...core,\r\n};\r\n\r\nexport type AxiosLocalForage = core.AxiosLocalForage;\r\nexport type AxiosLocalForageType = core.AxiosLocalForageType;\r\nexport type AxiosLocalForageInitOpts = core.AxiosLocalForageInitOpts;\r\nexport type AxiosLocalForageReq<T> = core.AxiosLocalForageReq<T>;\r\nexport type AxiosLocalForageResp<T> = core.AxiosLocalForageResp<T>;\r\n","import * as localforage from \"localforage\";\r\nimport { core as trmrk } from \"trmrk\";\r\n\r\nimport {\r\n  ApiConfigData,\r\n  ApiResponse,\r\n  AxiosResponse,\r\n  ApiServiceType,\r\n  AxiosRequestConfig,\r\n} from \"trmrk-axios\";\r\n\r\nimport { browser as trmrkBrowser, TrmrkDBResp } from \"trmrk-browser-core\";\r\n\r\nexport interface AxiosLocalForageInitOpts {\r\n  data: ApiConfigData;\r\n  defaultConfigFactory?:\r\n    | ((data: any) => AxiosRequestConfig<any> | undefined)\r\n    | null\r\n    | undefined;\r\n}\r\n\r\nexport interface AxiosLocalForageReq<T> {\r\n  localForageGet: () => Promise<TrmrkDBResp<T>>;\r\n  apiCall: (apiSvc: ApiServiceType) => Promise<ApiResponse<T>>;\r\n  localForageSet: (data: T) => Promise<TrmrkDBResp<T>>;\r\n}\r\n\r\nexport interface AxiosLocalForageResp<T>\r\n  extends ApiResponse<T>,\r\n    TrmrkDBResp<T> {}\r\n\r\nexport class AxiosLocalForage {\r\n  constructor(public readonly apiSvc: ApiServiceType) {}\r\n\r\n  public init(opts: AxiosLocalForageInitOpts) {\r\n    this.apiSvc.init(opts.data, opts.defaultConfigFactory);\r\n  }\r\n\r\n  public async req<T>(opts: AxiosLocalForageReq<T>) {\r\n    let resp = (await opts.localForageGet()) as AxiosLocalForageResp<T>;\r\n\r\n    if (!resp.cacheMatch) {\r\n      resp = (await opts.apiCall(this.apiSvc)) as AxiosLocalForageResp<T>;\r\n\r\n      if (resp.isSuccessStatus) {\r\n        const setResp = await opts.localForageSet(resp.data);\r\n        resp.cacheError = setResp.cacheError;\r\n      }\r\n    }\r\n\r\n    return resp;\r\n  }\r\n}\r\n\r\nexport type AxiosLocalForageType = AxiosLocalForage;\r\n"],"names":[],"version":3,"file":"index.js.map"}